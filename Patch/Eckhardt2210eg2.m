% Simulate forced heterogeneous diffusion in 1D on patches
% as an example application of patches in space. Adapted for
% the second example of Eckhardt2210.04536 (section 6.2.1).
% Implement Dirichlet BCs using new facilities in the patch
% toolbox.   AJR, Nov 2019 -- 4 Jan 2023
%!TEX root = ../Doc/eqnFreeDevMan.tex
%{
\section{\texttt{Eckhardt2210eg2}: example of a 1D
heterogeneous diffusion by simulation on small patches}
\label{sec:Eckhardt2210eg2}


Plot an example simulation in time generated by the patch
scheme applied to macroscale forced diffusion through a
medium with microscale heterogeneity in space.  This is
more-or-less the second example of \cite{Eckhardt2022}
[\S6.2.1].

Suppose the spatial microscale lattice is at points~\(x_i\),
with constant spacing~\(dx\).  With dependent
variables~\(u_i(t)\), simulate the microscale lattice
forced diffusion system
\begin{equation}
\D t{u_{i}}= \frac1{dx^2}\delta[a_{i-1/2}\delta u_{i}] +f_i(t),
\label{eq:hetroDiffF}
\end{equation}
in terms of the centred difference operator~\(\delta\). The
system has a microscale heterogeneity via the
coefficients~\(a_{i+1/2}\) which has some given known
periodicity~\(\epsilon\). 

\begin{figure}
\centering \caption{\label{fig:Eckhardt2210eg2}diffusion
field~\(u(x,t)\) of the patch scheme applied to the forced
heterogeneous diffusive~\cref{eq:hetroDiffF}. Simulate for
\(5,9,17,33\) patches and compare to the full-domain
simulation (65~patches, not shown).}
\includegraphics[scale=0.8]{Figs/Eckhardt2210eg2}
\end{figure}

Here use period \(\epsilon=1/130\) (so that computation
completes in seconds).  The patch scheme computes only on a
fraction of the spatial domain, see
\cref{fig:Eckhardt2210eg2}.  Compute \emph{errors} as the
maximum difference (at time $t=1$) between the patch scheme
prediction and a full-domain simulation of the same
underlying spatial discretisation (which here has space
step~\(0.00128\)). 
\begin{equation*}
\begin{array}{lrrrr}
\text{patch spacing }H& 0.25& 0.12& 0.06& 0.03\\
\text{exp-sine-forcing error}& 8\E3& 2\E3& 3\E4& 2\E5\\
\text{parabolic-forcing error}& 9\E9&  4\E9&  1\E9&  0.06\E9
\end{array}
\end{equation*}
The smooth sine-forcing leads to errors that appear due to
patch scheme and its interpolation. The parabolic-forcing
errors appear to be due to the integration errors of
\verb|ode15s| and not at all due to the patch scheme. In
comparison, \cite{Eckhardt2022} reported much larger errors
in the range \(0.001\)--\(0.1\) (Figure~3).




\subsection{Simulate heterogeneous diffusion systems}
%\label{sec:sc2heterodiff}


First establish the microscale heterogeneity has
micro-period \verb|mPeriod| on the lattice, and coefficients
to match Eckhardt2210.04536 \S6.2.1. Set the phase of the
heterogeneity so that each patch centre is a point of
symmetry of the diffusivity. Then the heterogeneity is
repeated to fill each patch. 
\begin{matlab}
%}
clear all
%global OurCf2eps, OurCf2eps=true %option to save plots
mPeriod = 6
y = linspace(0,1,mPeriod+1)';
a = 1./(2-cos(2*pi*y(1:mPeriod)))
global microTimePeriod; microTimePeriod=0;
%{
\end{matlab}

Set the spatial period~\(\epsilon\), via
integer~\(1/\epsilon\), and other parameters.
\begin{matlab}
%}
maxLog2Nx = 6
nPeriodsPatch = 2 % any integer
rEpsilon = nPeriodsPatch*(2^maxLog2Nx+1) % up to 200 say
dx = 1/(mPeriod*rEpsilon+1)
nSubP = nPeriodsPatch*mPeriod+2
tol=1e-9;
%{
\end{matlab}
Loop to explore errors on various sized patches.
\begin{matlab}
%}
Us=[]; DXs=[]; % for storing results to compare
iPP=0; I=nan;
for log2Nx = 2:maxLog2Nx
    nP = 2^log2Nx+1
%{
\end{matlab}
Determine indices of patches that are common in various
resolutions
\begin{matlab}
%}
    if isnan(I), I=1:nP; else I=2*I-1; end
%{
\end{matlab}


Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice diffusion system
\cref{eq:hetroDiffF} solved on domain~\([0,1]\), with
\verb|nP| patches,  and say fourth order interpolation to
provide the edge-values.  Setting \verb|patches.EdgyInt|
true means the edge-values come from interpolating the
opposite next-to-edge values of the patches (not the
mid-patch values).  
\begin{matlab}
%}
    global patches
    ordCC = 4
    configPatches1(@heteroDiffF,[0 1],'equispace',nP ...
        ,ordCC,dx,nSubP,'EdgyInt',true,'hetCoeffs',a);
    DX = mean(diff(squeeze(patches.x(1,1,1,:))))
    DXs=[DXs;DX];
%{
\end{matlab}

Set the forcing coefficients, either the original parabolic,
or exp-sinusoidal.
\begin{matlab}
%}
    if 0 % given forcing is exact
      patches.f1=2*( patches.x-patches.x.^2 );
      patches.f2=2*0.5+0*patches.x;
    else% simple exp.sine forcing 
      patches.f1=sin(pi*patches.x).*exp(patches.x);
      patches.f2=pi/2*sin(pi*patches.x).*exp(patches.x);
    end%if
%{
\end{matlab}



\paragraph{Simulate}
Set the initial conditions of a simulation to be zero.
Integrate to time~1 using standard integrators.
\begin{matlab}
%}
    u0 = 0*patches.x;
    tic
    [ts,us] = ode15s(@patchSys1, [0 1], u0(:));
    cpuTime=toc
%{
\end{matlab}


\paragraph{Plot space-time surface of the simulation} We
want to see the edge values of the patches, so adjoin a row
of \verb|nan|s in between patches. For the field values
(which are rows in~\verb|us|) we need to reshape, permute,
interpolate to get edge values, pad with \verb|nan|s, and
reshape again. 
\begin{matlab}
%}
    xs = squeeze(patches.x);
    us = patchEdgeInt1( permute( reshape(us ...
        ,length(ts),nSubP,1,nP) ,[2 1 3 4]) );
    us = squeeze(us);
    xs(end+1,:) = nan;  us(end+1,:,:) = nan;
    uss=reshape(permute(us,[1 3 2]),[],length(ts));
%{
\end{matlab}

Plot a space-time surface of field values over the
macroscale duration of the simulation.
\begin{matlab}
%}
    iPP=iPP+1;
    if iPP<=4 % only draw four subplots
      figure(1), if iPP==1, clf(), end
      subplot(2,2,iPP)
      mesh(ts,xs(:),uss) 
      if iPP==1, uMax=ceil(max(uss(:))*100)/100, end
      view(60,40), colormap(0.8*hsv), zlim([0 uMax])
      xlabel('time t'), ylabel('space x'), zlabel('u(x,t)') 
      drawnow
    end%if 
%{
\end{matlab}

At the end of the \verb|log2Nx|-loop, store field at the
end-time from centre region of each patch for comparison.
\begin{matlab}
%}
    i=nPeriodsPatch/2*mPeriod+1+(-mPeriod/2+1:mPeriod/2);
    Us(:,:,iPP)=squeeze(us(i,end,I));
    Xs=squeeze(patches.x(i,1,1,I));
    if iPP>1
       assert(norm(Xs-Xsp)<tol,'sampling error in space')
       end
    Xsp=Xs; 
end%for log2Nx
ifOurCf2eps(mfilename) %optionally save plot
%{
\end{matlab}
Assess errors by comparing to the full-domain solution
\begin{matlab}
%}
DXs=DXs
Uerr=squeeze(max(max(abs(Us-Us(:,:,end)))))
figure(2),clf,
loglog(DXs,Uerr,'o:')
xlabel('H'),ylabel('error')
ifOurCf2eps([mfilename 'Errs']) %optionally save plot
%{
\end{matlab}



\input{../Patch/heteroDiffF.m}
%}