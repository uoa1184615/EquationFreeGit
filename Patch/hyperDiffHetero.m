% Simulate a heterogeneous version of hyper-diffusion PDE in
% 1D on patches as an example application with pairs of edge
% points needing to be interpolated between patches in
% space.  AJR, 12 Apr 2023
%!TEX root = ../Doc/eqnFreeDevMan.tex
%{
\section{\texttt{hyperDiffHetero}: simulate a heterogeneous
hyper-diffusion PDE in 1D on patches}
\label{sec:hyperDiffHetero}
\localtableofcontents

\cref{fig:hyperDiffHeteroU} shows an example simulation in
time generated by the patch scheme applied to a
heterogeneous version of the hyper-diffusion \pde. That such
simulations makes valid predictions was established by
\cite{Bunder2013b} who proved that the scheme is accurate
when the number of points in a patch is tied to a multiple
of the periodicity of the pattern. 

\begin{figure}
\centering \caption{\label{fig:hyperDiffHeteroU}
hyper-diffusing field~\(u(x,t)\) in the patch scheme applied
to microscale heterogeneous hyper-diffusion
(\cref{sec:hyperDiffHetero}).  The log-time axis shows:
\(t<10^{-2}\), rapid decay of sub-patch micro-structure;
\(10^{-2}<t<1\), meso-time quasi-equilibrium; and
\(1<t<10^2\), slow decay of macroscale structures.}
\includegraphics[scale=0.9]{hyperDiffHeteroUxt}
\end{figure}%

We aim to simulate the heterogeneous hyper-diffusion \pde
\begin{equation}
u_t= -D[c_1(x)Du] \quad\text{where operator } 
D := \partial_x( c_2(x) \partial_x ),
\label{eq:hyperDiffHetero}
\end{equation}
for microscale periodic coefficients~\(c_l(x)\), and
boundary conditions of \(u=u_x=0\) at \(x=0,L\). In this 1D
space, the macroscale, homogenised, effective
hyper-diffusion should be some unknown `average' of these
coefficients, but we use the patch scheme to provide a
computational homogenisation. We discretise the \pde\ to a
lattice of values~\(u_i(t)\), with lattice spacing~\(dx\),
and governed by
\begin{equation*}
\dot u_i = -D[c_{i1}D u_i] \quad\text{where operator } 
D := \delta( c_{i2}\delta )/dx^2
\end{equation*}
in terms of centred difference operator \(\delta u_i :=
u_{i+1/2} - u_{i-1/2}\).

Set the desired microscale periodicity, and correspondingly
choose random microscale diffusion coefficients (with
some subscripts shifted by a half).
\begin{matlab}
%}
clear all
basename = mfilename
%global OurCf2eps, OurCf2eps=true %optional to save plots
nGap = 3 % controls size of gap between patches
nPtsPeriod = 5
dx = 0.5/nGap/nPtsPeriod
%{
\end{matlab}

Create some random heterogeneous coefficients, log-uniform.  
\begin{matlab}
%}
csVar = 1 
cs = 0.2*exp( -csVar/2+csVar.*rand(nPtsPeriod,2) )
%{
\end{matlab}

Establish global data struct~\verb|patches| for
heterogeneous hyper-diffusion on a finite domain with, on
average, one patch per unit length.  Use seven patches, and
use high-order interpolation with \(\verb|ordCC|=0\).
\begin{matlab}
%}
nPatch = 7
nSubP = 2*nPtsPeriod+4 % or +2 for not-edgyInt
Len = nPatch;
ordCC = 0;
dom.type = 'equispace'; 
dom.bcOffset = 0.5 % for BC type
patches = configPatches1(@hyperDiffPDE,[0 Len],dom ...
    ,nPatch,ordCC,dx,nSubP,'EdgyInt',true,'nEdge',2 ...
    ,'hetCoeffs',cs);
xs=squeeze(patches.x);
%{
\end{matlab}


\paragraph{Simulate in time}
Set an initial condition, and here integrate forward in time
using a standard method for stiff systems---because of the
simplicity of linear problems this method works quite
efficiently here.  Integrate the interface \verb|patchSys1|
(\cref{sec:patchSys1}) to the microscale differential
equations.
\begin{matlab}
%}
u0 = sin(2*pi/Len*patches.x).*rand(nSubP,1,1,nPatch);
tic
[ts,us] = ode15s(@patchSys1, [0 100], u0(:) ,[],patches);
simulateTime = toc
us = reshape(us,length(ts),numel(patches.x(:)),[]);
%{
\end{matlab}

Plot the simulation in \cref{fig:hyperDiffHeteroU}, using
log-axis for time so we can see a little of both micro- and
macro-dynamics. 
\begin{matlab}
%}
figure(1),clf
xs([1:2 end-1:end],:) = nan;
t0=min(find(ts>1e-5));
mesh(ts(t0:3:end),xs(:),us(t0:3:end,:)'),  view(55,50)
colormap(0.7*hsv)
xlabel('time $t$'), ylabel('space $x$'), zlabel('$u(x,t)$')
ca=gca;  ca.XScale='log';  ca.XLim=ts([t0 end]);
ifOurCf2eps([basename 'Uxt'])
%{
\end{matlab}
Fin.




\subsection{Heterogeneous hyper-diffusion PDE inside patches}
As a microscale discretisation of hyper-diffusion
\pde~\cref{eq:hyperDiffHetero} \(u_t= -D[c_1(x)Du] \), where
heterogeneous operator \(D = \partial_x( c_2(x) \partial_x
)\).  
\begin{matlab}
%}
function ut=hyperDiffPDE(t,u,patches)
  dx=diff(patches.x(1:2));  % microscale spacing
%{
\end{matlab}
Code Dirichlet boundary conditions of zero function and
derivative at left-end of left-patch, and right-end of
right-patch.  For slightly simpler coding, squeeze out the
two singleton dimensions.
\begin{matlab}
%}
  u = squeeze(u);
  if ~patches.periodic % discretise BC u=u_x=0
      u(1:2,1)=0; 
      u(end-1:end,end)=0;
  end%if
%{
\end{matlab}
Here code straightforward centred discretisation in space. 
\begin{matlab}
%}
  ut = nan+u;   % preallocate output array
  v = patches.cs(2:end,1).*diff(patches.cs(:,2).*diff(u))/dx^2;
  ut(3:end-2,:) = -diff(patches.cs(2:end-1,2).*diff(v))/dx^2 ;
end
%{
\end{matlab}
%}
