% Simulate toy heterogeneous elasticity in 1D on patches
% as an example application of patches in space. Adapted from
% the example Figure 3(a) of Combescure(2022).
% AJR Nov 2022
%!TEX root = doc.tex
%{
\section{\texttt{Combescure2022}: example of a 1D
heterogeneous toy elasticity by simulation on small patches}
\label{sec:Combescure2022}


Plot an example simulation in time generated by the patch
scheme applied to macroscale toy elasticity through a
medium with microscale heterogeneity. 

\begin{figure}
\centering
\caption{\label{fig:toyElas}1D arrangement of non-linear springs with connections to (a) next-to-neighbor node  \protect\cite[Fig.~3(a)]{Combescure2022}.  The blue box is one cell of one period, width~\(2b\), containing an odd and an even~\(i\).}
\setlength{\unitlength}{0.01\linewidth}
\begin{picture}(100,31)
\put(0,0){\framebox(100,31){}}
\put(0,0){\includegraphics[width=\linewidth]{Figs/toyElas}}
\put(36,4){\color{blue}\framebox(27,23){cell}}
\end{picture}
\end{figure}

Suppose the spatial microscale lattice is at rest at points~\(x_i\),
with constant spacing~\(b\) (\cref{fig:toyElas}).  With displacement
variables~\(u_i(t)\), simulate the microscale lattice
toy elasticity system with 2-periodicity: for \(p=1,2\) (respectively black and red in \cref{fig:toyElas}) and for every~\(i\),
\begin{align}
&\epsilon^p_i:=\frac1{pb}(u_{i+p/2}-u_{i-p/2}),
&&\sigma^p_i:=w'_p(\epsilon^p_i),
&&\DD t{u_{i}}= \sum_{p=1}^2\frac1{pb?}(\sigma^p_{i+p/2}-\sigma^p_{i-p/2}).
\label{eq:heteroToyE}
\end{align}
The system has a microscale heterogeneity via the
different functions~\(w'_p(\epsilon):=\epsilon-M_p\epsilon^3+\epsilon^5\) \cite[\S4]{Combescure2022}:
\begin{itemize}
\item microscale instability with \(M_1:=2\) and \(M_2:=1\); and
\item macroscale instability with \(M_1:=-1\) and \(M_2:=3\).
\end{itemize}

 


%\begin{figure}
%\centering \caption{\label{fig:Combescure2022}toy elasticity
%field~\(u(x,t)\) of the patch scheme applied to the
%heterogeneous elastic~\cref{eq:heteroToyE}. Simulates for
%various patch ratios~\(r\) including the full-domain
%simulation \(r=1\).}
%\includegraphics[width=12cm]{Figs/Combescure2022.png}
%\end{figure}

%Here use period \(\epsilon=1/200\) (so that computation
%completes in seconds).  The patch scheme computes only on a
%fraction~\(r\) of the spatial domain, see
%\cref{fig:Combescure2022}.  Compute \emph{errors} as the
%maximum difference (at time $t=1$) between the patch scheme
%prediction and a full domain simulation of the same
%underlying spatial discretisation (which here has space
%step~\(1/1200\)). 
%\begin{equation*}
%\begin{array}{lrrrr}
%\text{patch ratio }r& 0.5& 0.2& 0.1& 0.05\\
%\text{sine-forcing error}& 0.5e{-}8& 1.4e{-8}& 1.8e{-8}& 2.1e{-}8\\
%\text{Eckhardt-forcing error}& 0.0018&  0.0038&  0.0046&  0.0051
%\end{array}
%\end{equation*}
%The smooth sine-forcing leads to errors that appear due to
%the integration tolerance of \verb|ode15s|. The
%Eckhardt-forcing errors are then viewed as either due to
%boundary layers next to the Dirichlet boundaries, or
%equivalently due to the lack of smoothness in the
%odd-periodic extensions of the forcing required to preserve
%the Dirichlet conditions.




\subsection{Configure heterogeneous toy elasticity systems}
%\label{sec:sc2heterodiff}


Set some physical parameters.
\begin{matlab}
%}
clear all
global b M vis i0 iN
b = 1  % separation of lattice points
N = 40 % # lattice steps in L
L = b*N
M = [0 0] % no cubic spring terms
%M = [2 1] % small scale instability??
M = [-1 3] % large scale instability??
% see end-heteroToyE for function dLdt of prescribed end movement
vis = 0.01
tEnd = 130
tol = 1e-9;
%{
\end{matlab}
Patch parameters: here \verb|nSubP| is the number of cells,
so \verb|lPatch|~is the distance from leftmost odd/even
points to the rightmost odd/even points, respectively.
\begin{matlab}
%}
edgyInt = true
nSubP = 6, nP = 5 % gives ratio=1 for full-domain
%nSubP = 4, nP = 3
H=L/nP
if edgyInt, ratio=2*b*(nSubP-2)/H, end
%nP4ratio1=L/(2*b*(nSubP-2))
%{
\end{matlab}


Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice toy elasticity
system~\cref{eq:heteroToyE}. Solved on \(2L\)-periodic
domain, with \verb|2*nP| patches, and spectral interpolation
to provide the edge-values of the inter-patch coupling
conditions.   
\begin{matlab}
%}
global patches
configPatches1(@heteroToyE,[0 2*L],nan,2*nP ...
    ,0,ratio,nSubP,'EdgyInt',edgyInt);
patches.x = patches.x-L+H/2;% shift so [0,L] is 2nd half of patches
%xGrid=squeeze(patches.x) % optionally disp the spatial grid
assert(abs(2*b-diff(patches.x(1:2)))<tol,'sub-patch grid config error')
xx = patches.x+[-1 1]*b/2; % staggered sub-cell positions
%{
\end{matlab}



\subsection{Eigenvalues of the Jacobian}
Set zero to be the reference equilibrium in this linear
problem. Put NaNs on the patch-edges.
\begin{matlab}
%}
if 0
u0 = [ 0*xx 0*xx ];
u0([1 end],:,:,:)=nan;
i=find(~isnan(u0));
nJac=length(i)
%{
\end{matlab}
Remove boundary conditions.
\begin{matlab}
%}
i0=[]; iN=[];
%{
\end{matlab}
Construct the Jacobian column-wise from the transform of a
complete set of unit basis vectors (as this is linear
problem at the moment).
\begin{matlab}
%}
Jac=nan(nJac);
for j=1:nJac
  uj=u0; uj(i(j))=1;
  dujdt=patchSys1(-1,uj);
  Jac(:,j)=dujdt(i);
end
Jac(abs(Jac)<tol)=0;
figure(3),clf,spy(Jac)
%{
\end{matlab}
Find eigenvalues
\begin{matlab}
%}
[evecs,evals]=eig(Jac);
evals=diag(evals);
[~,j]=sort( -real(evals)+0.0001*abs(imag(evals)) );
evals=evals(j);
evecs=evecs(:,j);
leadingEvals=evals(1:18)'
%{
\end{matlab}
Plot spectrum
\begin{matlab}
%}
   handle = plot(real(evals),imag(evals),'.');
   xlabel('real-part'), ylabel('imag-part')
   quasiLogAxes(handle,0.1,1);
   drawnow
end%if compute eigenvalues
%{
\end{matlab}



\subsection{Simulate in time}
Set the initial conditions of a simulation. I choose to
store odd~\(i\) in \verb|u((i+1)/2,1,:)| and even~\(i\) in
\verb|u(i/2,2,:)|, that is, array
\begin{equation*}
\verb|u|=\begin{bmatrix} u_1&u_2\\ u_3&u_4\\ u_5&u_6\\ \vdots&\vdots \end{bmatrix}.
\end{equation*}
\begin{matlab}
%}
u0 = 0*[ sin(pi/L*xx)  -0.14*cos(pi/L*xx) ];
u0 = u0+0.01*( rand(size(u0))-0.5 );
%{
\end{matlab}
But, impose \(u_i=0\) at \(x=0\) which here I translate to
mean that \(u_i=\dot u_i=0\) for both \(x_i=\pm b/2\).
Slightly different to the left-end of \cref{fig:toyElas},
but should be near enough.  Here find both \(u,\dot u\)
locations.
\begin{matlab}
%}
i0=find(abs([xx xx])<0.6*b);
u(i0)=0;
%{
\end{matlab}
Apply a set force at material originally at \(x=L\), so
start with \(u_i=\dot u_i=0\) for both \(x_i=L\pm b/2\). 
Subsequently apply an additional and increasing compression
force on the points initially at \(x=L\).  Hmmm: but that is
not quite isolating the two sides of \(x=L\)??
\begin{matlab}
%}
iN=find(abs([xx xx]-L)<0.6*b)
u(iN)=0;
%{
\end{matlab}

Integrate some time using standard integrator.
\begin{matlab}
%}
tic
[ts,ust] = ode23(@patchSys1, tEnd*linspace(0,1,41), u0(:));
cpuIntegrateTime = toc
%{
\end{matlab}


\paragraph{Plot space-time surface of the simulation} We
want to see the edge values of the patches, so interpolate
and then adjoin a row of \verb|nan|s in between patches.
Because of the odd/even storage we need to do a lot of
permuting and reshaping. 
\begin{matlab}
%}
xs = reshape( permute( xx ,[2 1 3 4]), 2*nSubP,2*nP);  
xs(end+1,:) = nan;  
uvs = reshape( permute( reshape(ust ...
      ,length(ts),nSubP,4,1,2*nP) ,[2 3 1 4 5]) ,nSubP,[],1,2*nP);
uvs = reshape( patchEdgeInt1(uvs) ,nSubP,4,[],2*nP);
% extract displacements
us = reshape( permute( uvs(:,1:2,:,:) ...
     ,[2 1 4 3]) ,2*nSubP,2*nP,[]);
us(end+1,:,:) = nan;
us = reshape(us,[],length(ts));
% extract velocities
vs = reshape( permute( uvs(:,3:4,:,:) ...
     ,[2 1 4 3]) ,2*nSubP,2*nP,[]);
vs(end+1,:,:) = nan;
vs = reshape(vs,[],length(ts));
%{
\end{matlab}

Plot evolving function
\begin{matlab}
%}
figure(1),clf()
plot(xs(:),vs)
xlabel('space x')
%ylabel('displacement u')
ylabel('velocity v')
legend(num2str(ts))
%{
\end{matlab}


Plot a space-time surface of displacements over the
macroscale duration of the simulation.
\begin{matlab}
%}
  figure(2), clf()
  mesh(ts,xs(:),us) 
  view(60,40), colormap(0.8*hsv)
  xlabel('time t'), ylabel('space x'), zlabel('u(x,t)') 
  title(['patch ratio r = ' num2str(ratio)])
  drawnow
%{
\end{matlab}
Similarly plot velocities
\begin{matlab}
%}
  figure(3), clf()
  mesh(ts,xs(:),vs) 
  view(60,40), colormap(0.8*hsv)
  xlabel('time t'), ylabel('space x'), zlabel('v(x,t)') 
  title(['patch ratio r = ' num2str(ratio)])
  drawnow
%{
\end{matlab}



\input{heteroToyE.m}
%}