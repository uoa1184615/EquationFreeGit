% Simulate example of 1D space-time heterogeneous diffusion
% via computational homogenisation with projective
% integration and small patches. Adapted for the first
% example of Eckhardt2210.04536 (section 6.2). Here
% implement Dirichlet BCs on the macroscale by placing
% patches centred on the boundaries and requiring
% odd-periodic extensions of fields and forcing.   AJR, Nov
% 2019 -- 25 Oct 2022
%!TEX root = doc.tex
%{
\section{\texttt{piEckhart1}: example of 1D space-time
heterogeneous diffusion via computational homogenisation
with projective integration and small patches}
\label{sec:piEckhart1}


Plot an example simulation in time generated by projective
integration allied with the patch scheme applied to forced
diffusion in a medium with microscale heterogeneity. 

Suppose the spatial microscale lattice is at points~\(x_i\),
with constant spacing~\(dx\).  With dependent
variables~\(u_i(t)\), simulate the microscale lattice forced
diffusion system
\begin{equation}
\D t{u_{i}}= \frac1{dx^2}\delta[a_{i-1/2}(t)\delta u_{i}] +f_i(t),
\label{eq:hetroDiffFt}
\end{equation}
in terms of the centred difference operator~\(\delta\). The
system has a microscale heterogeneity via the
coefficients~\(a_{i+1/2}\) which has given
periodicity~\(\epsilon\) in space, and
periodicity~\(\epsilon^2\) in time. 


The approximate homogenised \textsc{pde} is
\(U_t=A_0U_{xx}+F\) with \(U=0\) at \(x=0,1\). Its slowest
mode is then \(U=\sin(\pi x)e^{-A_0\pi^2t}\). When
\(A_0=3.3524\) as in Eckhart then the rate of evolution is
about~\(33\) which is relatively fast on the simulation
time-scale of \(T=1\). Let's slow down the dynamics by
reducing diffusivities by a factor of~\(30\), so effectively
\(A_0\approx 0.1\) and \(A_0\pi^2\approx 1\). 

Also, in the microscale fluctuations change the time
variation to cosine, not its square (because I cannot see
the point of squaring it!).

The highest wavenumber mode on the macro-grid of patches,
spacing~\(H\), is the zig-zag mode on \(\dot U_i = A_0(
U_{I+1} -2U_I +U_{I-1} )/H^2 +F_I\) which evolves like \(U_I
= (-1)^I e^{-\alpha t}\) for the fastest `slow rate' of
\(\alpha = 4A_0^2/H^2\). When \(H=0.2\) and
\(A_0\approx0.1\) this rate is \(\alpha\approx10\).


Here use period \(\epsilon=1/100\) (so that computation
completes in seconds, and because we have slowed the
dynamics by~\(30\)).  The patch scheme computes only on a
fraction~\(r\) of the spatial domain.  Projective
integration computes only on a fraction of the time domain
determined by the `burst length'.




\subsection{Simulate heterogeneous diffusion systems}
\label{sec:sc2heterodiff}


First establish the microscale heterogeneity has
micro-period~\verb|mPeriod| on the spatial lattice, and
coefficients inspired by Eckhardt2210.04536~\S6.2. Set the
phase of the heterogeneity so that each patch centre is a
point of symmetry of the diffusivity. Then the heterogeneity
is repeated to fill each patch. If an odd number of
odd-periods in a patch, then the centre patch is a grid
point of the field~\(u\), otherwise the centre patch is at a
half-grid point.
\begin{matlab}
%}
mPeriod = 6
y = linspace(0,1,mPeriod+1)';
a = ( 3+cos(2*pi*y(1:mPeriod)) )/30
A0 = 1/mean(1./a) % roughly the effective diffusivity
%{
\end{matlab}
The microscale diffusivity has an additional additive
component of \(+\tfrac1{30}\cos(2\pi t/\epsilon^2)\) which
is coded into time derivative routine via global
\verb|microTimePeriod|.


Set the periodicity, via integer~\(1/\epsilon\), and other
parameters.
\begin{matlab}
%}
rEpsilon = 100
dx = 1/(mPeriod*rEpsilon)
nP = 5 % the number of patches on [0 1]
tol=1e-9;
nPeriodsPatch = 2
global microTimePeriod
microTimePeriod = 1/rEpsilon^2
%{
\end{matlab}


Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice diffusion
system~\cref{eq:hetroDiffFt} solved on \(2\)-periodic
macroscale domain, with \verb|2*nP| patches,  and spectral
interpolation to provide the edge-values of the inter-patch
coupling conditions. Setting \verb|patches.EdgyInt| true
means the edge-values come from interpolating the opposite
next-to-edge values of the patches (not the mid-patch
values).  
\begin{matlab}
%}
ratio = nPeriodsPatch/(rEpsilon/nP)
nSubP = nPeriodsPatch*mPeriod+2
global patches
configPatches1(@heteroDiffF,[0 2],nan,2*nP ...
    ,0,ratio,nSubP,'EdgyInt',true,'hetCoeffs',a);
patches.x = patches.x-1+1/(2*nP);% shift so [0,1] is 2nd half of patches
assert(abs(dx-diff(patches.x(1:2)))<tol,'sub-patch-grid config error')
%{
\end{matlab}

Set the forcing coefficients as the odd-periodic extensions,
accounting for roundoff error in~\verb|f2|.
\begin{matlab}
%}
if 1 % odd-periodic extension of given forcing
patches.f1=2*( patches.x-sign(patches.x).*patches.x.^2 ...
              +(patches.x>1).*(patches.x-1).^2*2 );
patches.f2=2*0.5*sign(patches.x.*(1-patches.x)) ...
    .*(abs(patches.x.*(1-patches.x))>tol);
else% simple sine forcing give errors less than ??
patches.f1=sin(pi*patches.x);
patches.f2=pi/2*sin(pi*patches.x);
end%if
%f1=squeeze(patches.f1)% optionally disp spatial pattern f1
%f2=squeeze(patches.f2)% optionally disp spatial pattern f2
%{
\end{matlab}


\paragraph{Simulate}
Set the initial conditions of a simulation to be zero.
Mark that edge of patches are not to be used in the
projective extrapolation by setting initial values to NaN.
\begin{matlab}
%}
u0 = 0*patches.x;
u0([1 end],:) = nan;
%{
\end{matlab}
Set the desired macro- and microscale time-steps over the
time domain.  The macroscale step is in proportion to the
effective mean diffusion time on the macroscale, here
\(1/(A_0\pi^2)\approx1\) so for macro-scale error less
than~1\% need \(\Delta t<0.24\), so use~\(0.1\) say.  

The burst time depends upon the sub-patch effective
diffusion rate~\(\beta\) where here rate \(\beta \approx
\pi^2 A_0 /h^2 \approx400\) for patch width \(h =r/N
\approx0.02\): use the formula from the Manual, with
50\%~extra, and rounded to the nearest multiple of the time
micro-periodicity.
\begin{matlab}
%}
ts = linspace(0,1,11)
beta = pi^2*A0/(ratio/nP)^2 % slowest rate of fast modes
bT = 1.5*log(beta*diff(ts(1:2)))/beta
bT = max(10,round(bT/microTimePeriod))*microTimePeriod +1e-12
addpath('../../ProjInt')
%{
\end{matlab}
Time the projective integration simulation.
\begin{matlab}
%}
tic
[us,tss,uss] = PIRK2(@heteroBurstF, ts, u0(:), bT);
cputime=toc
%{
\end{matlab}


Test the error in BC is negligible, for both when micro-grid
point on boundary and when micro-grid points straddle
boundary.  For some reason the BC error climbs after
\(t=0.7\)---could it be \verb|ode45| quirk?
\begin{matlab}
%}
xs = squeeze(patches.x);  
i=[ max(find(xs<+tol)) min(find(xs>1-tol)) ];
j=[ min(find(xs>-tol)) max(find(xs<1+tol)) ];
medianBCerror=median( abs(uss(:,i)+uss(:,j))/2 ,'omitnan')
maxBCerror=max(max( abs(uss(:,i)+uss(:,j))/2 ))
assert(maxBCerror<5e-5,'BC failure')
%{
\end{matlab}

\paragraph{Plot space-time surface of the simulation} 
First, just a macroscale mesh plot---stereo pair.
\begin{matlab}
%}
Xs=mean(xs);
Us=squeeze(mean( reshape(us,length(ts),[],2*nP), 2,'omitnan'));
I=nP:2*nP;
figure(1),clf
for k = 1:2, subplot(2,2,k)
  mesh(ts,Xs(I),Us(:,I)')
  ylabel('x'), xlabel('t'), zlabel('U(x,t)')
  colormap(0.8*hsv), axis tight, view(62-4*k,45)
end
%{
\end{matlab}
Second, plot a surface detailing the microscale
bursts---stereo pair. Do not bother with the patch-edge
values.
\begin{matlab}
%}
i=i(1):i(2);
xs([1 end],:) = nan;
for k = 1:2, subplot(2,2,2+k)
  surf(tss,xs(i),uss(:,i)',  'EdgeColor','none')
  ylabel('x'), xlabel('t'), zlabel('u(x,t)')
  colormap(0.7*hsv), axis tight, view(62-4*k,45)
end
%{
\end{matlab}



\input{heteroBurstF.m}
%}