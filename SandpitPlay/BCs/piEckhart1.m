% Simulate forced heterogeneous diffusion in 1D on patches
% as an example application of patches in space and
% projective integration in time. Adapted for the first
% example of Eckhardt2210.04536 (section 6.2). Here
% implement Dirichlet BCs on the macroscale by placing
% patches centred on the boundaries and requiring
% odd-periodic extensions of fields and forcing.   AJR, Nov
% 2019 -- 21 Oct 2022
%!TEX root = doc.tex
%{
\section{\texttt{piEckhart1}: example of a 1D space-time
heterogeneous diffusion by projective integration with small
patches}
\label{sec:piEckhart1}


Plot an example simulation in time generated by the patch
scheme applied to macroscale forced diffusion through a
medium with microscale heterogeneity. 

Suppose the spatial microscale lattice is at points~\(x_i\),
with constant spacing~\(dx\).  With dependent
variables~\(u_i(t)\), simulate the microscale lattice
forced diffusion system
\begin{equation}
\D t{u_{i}}= \frac1{dx^2}\delta[a_{i-1/2}\delta u_{i}] +f_i(t),
\label{eq:hetroDiffF}
\end{equation}
in terms of the centred difference operator~\(\delta\). The
system has a microscale heterogeneity via the
coefficients~\(a_{i+1/2}\) which has some given known
periodicity~\(\epsilon\). 

%\begin{figure}
%\centering \caption{\label{fig:piEckhart1}diffusion
%field~\(u(x,t)\) of the patch scheme applied to the forced
%heterogeneous diffusive~\cref{eq:hetroDiffF}. Simulates for
%various patch ratios~\(r\) including the full-domain
%simulation \(r=1\).}
%\includegraphics[width=12cm]{Figs/piEckhart1.png}
%\end{figure}

The approximate homogenised \textsc{pde} is
\(U_t=A_0U_{xx}+F\) with \(U=0\) at \(x=0,1\). Its slowest
mode is then \(U=\sin(\pi x)e^{-A_0\pi^2t}\). When
\(A_0=3.3524\) as in Eckhart then the rate of evolution is
about~\(33\) which is fast on the time-scale of \(T=1\).
Let's slow it down by reducing diffusivities by a factor
of~\(30\). Also change the time variation to cosine, not its
square (because I cannot see the point of squaring it!).
Then the highest wavenumber mode on the macro-grid of
patches, spacing~\(H\), is the zig-zag mode on \(\dot
U_i=A_0(U_{I+1}-2U_I+U_{I-1})/H^2+F_I\) which evolves like
\(U_I=(-1)^Ie^{-\alpha t}\) for the `slow rate'
\(\alpha=4A_0^2/H^2\). With \(H=0.2\) and \(A_0\approx0.1\)
this rate is \(\alpha\approx1\).


Here use period \(\epsilon=1/100\) (so that computation
completes in seconds).  The patch scheme computes only on a
fraction~\(r\) of the spatial domain, see
\cref{fig:piEckhart1}.  Projective integration computes only
on a fraction of the time domain.
%Compute \emph{errors} as the
%maximum difference (at time $t=1$) between the patch scheme
%prediction and a full domain simulation of the same
%underlying spatial discretisation (which here has space
%step~\(1/1200\)). 
%\begin{equation*}
%\begin{array}{lrrrr}
%\text{patch ratio }r& 0.5& 0.2& 0.1& 0.05\\
%\text{sine-forcing error}& 0.5e{-}8& 1.4e{-8}& 1.8e{-8}& 2.1e{-}8\\
%\text{Eckhardt-forcing error}& 0.0018&  0.0038&  0.0046&  0.0051
%\end{array}
%\end{equation*}
%The smooth sine-forcing leads to errors that appear due to
%the integration tolerance of \verb|ode15s|. The
%Eckhardt-forcing errors are then viewed as either due to
%boundary layers next to the Dirichlet boundaries, or
%equivalently due to the lack of smoothness in the
%odd-periodic extensions of the forcing required to preserve
%the Dirichlet conditions.




\subsection{Simulate heterogeneous diffusion systems}
\label{sec:sc2heterodiff}


First establish the microscale heterogeneity has
micro-period~\verb|mPeriod| on the lattice, and coefficients
inspired by Eckhardt2210.04536~\S6.2. Set the phase of the
heterogeneity so that each patch centre is a point of
symmetry of the diffusivity. Then the heterogeneity is
repeated to fill each patch. If an odd number of odd-periods
in a patch, then the centre patch is a grid point of the
field~\(u\), otherwise the centre patch is at a half-grid
point.
\begin{matlab}
%}
mPeriod = 6
y = linspace(0,1,mPeriod+1)';
a = ( 3+cos(2*pi*y(1:mPeriod)) )/30
A0 = mean(a) %rough approximation to effective diffusivity
%{
\end{matlab}
The diffusivity has an additional additive component of
\(+\tfrac1{30}\cos(2\pi t/\epsilon^2)\) which is coded into
time derivative routine via global \verb|microTimePeriod|.


Set the periodicity, via integer~\(1/\epsilon\), and other
parameters.
\begin{matlab}
%}
rEpsilon = 100
dx = 1/(mPeriod*rEpsilon)
nP = 5 % the number of patches on [0 1]
maxPeriodsPatch = rEpsilon/nP
tol=1e-9;
global microTimePeriod, microTimePeriod = 1/rEpsilon^2
%{
\end{matlab}
Loop to explore errors on various sized patches.
\begin{matlab}
%}
nPPs = maxPeriodsPatch./[1 2 5 10 20 50 100];
nPPs = nPPs(nPPs>1)
nPPs=2 % temporary for testing
Us=[]; Uerr=0;% for storing results to compare
for iPP = 1:length(nPPs)
nPeriodsPatch = nPPs(iPP)
%{
\end{matlab}


Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice diffusion
system~\cref{eq:hetroDiffF} solved on \(2\)-periodic domain,
with \verb|2*nP| patches,  and spectral interpolation to
provide the edge-values of the inter-patch coupling
conditions. Setting \verb|patches.EdgyInt| true means the
edge-values come from interpolating the opposite
next-to-edge values of the patches (not the mid-patch
values).  
\begin{matlab}
%}
ratio = nPeriodsPatch/maxPeriodsPatch
nSubP = nPeriodsPatch*mPeriod+2
global patches
configPatches1(@heteroDiffF,[0 2],nan,2*nP ...
    ,0,ratio,nSubP,'EdgyInt',true,'hetCoeffs',a);
patches.x = patches.x-1+1/(2*nP);% shift so [0,1] is 2nd half of patches
%x=squeeze(patches.x) % optionally disp the spatial grid
assert(abs(dx-diff(patches.x(1:2)))<tol,'sub-patch-grid config error')
%{
\end{matlab}

Set the forcing coefficients as the odd-periodic extensions,
accounting for roundoff error in~\verb|f2|.
\begin{matlab}
%}
if 1 % odd-periodic extension of given forcing
patches.f1=2*( patches.x-sign(patches.x).*patches.x.^2 ...
              +(patches.x>1).*(patches.x-1).^2*2 );
patches.f2=2*0.5*sign(patches.x.*(1-patches.x)) ...
    .*(abs(patches.x.*(1-patches.x))>tol);
else% simple sine forcing give errors less than ??
patches.f1=sin(pi*patches.x);
patches.f2=pi/2*sin(pi*patches.x);
end%if
%f1=squeeze(patches.f1)% optionally disp spatial pattern f1
%f2=squeeze(patches.f2)% optionally disp spatial pattern f2
%{
\end{matlab}


\paragraph{Simulate}
Set the initial conditions of a simulation to be zero.
Mark that edge of patches are not to be used in the
projective extrapolation by setting initial values to \nan.
\begin{matlab}
%}
u0 = 0*patches.x;
u0([1 end],:) = nan;
%{
\end{matlab}
Set the desired macro- and microscale time-steps over the
time domain.  The macroscale step is in proportion to the
effective mean diffusion time on the macroscale, here
\(1/(A_0\pi^2)\approx1\) so for macro-scale error less
than~1\% need \(\Delta t<0.24\).  The burst time depends
upon the intra-patch effective diffusion time~\(1/\beta\)
where here rate \(\beta\approx \pi^2A_0/h^2\approx400\) for
patch width \(h=r/N\approx0.05\): use the formula from the
Manual, with 50\%~extra, and rounded to the nearest multiple
of the time micro-periodicity.
\begin{matlab}
%}
ts = linspace(0,1,11)
beta = pi^2*A0/(ratio/nP)^2 % slowest rate of fast modes
bT = 1.5*log(beta*diff(ts(1:2)))/beta
bT = max(10,round(bT/microTimePeriod))*microTimePeriod +1e-12
addpath('../../ProjInt')
tic
[us,tss,uss] = PIRK2(@heteroBurstF, ts, u0(:), bT);
cputime=toc
%{
\end{matlab}


\paragraph{Plot space-time surface of the simulation} 
Do not bother with the patch-edge values. Plot a surface
detailing the microscale bursts as shown in the stereo
\cref{fig:HomogenisationMicro}.
%\begin{figure}
%\centering
%\caption{\label{fig:HomogenisationMicro}cross-eyed stereo
%pair of the field~\(u(x,t)\) during each of the microscale
%bursts used in the projective integration of heterogeneous
%diffusion.}
%\includegraphics[scale=0.9]{homogenisationExampleMicro}
%\end{figure}
\begin{matlab}
%}
xs = patches.x;  xs([1 end],:) = nan;
figure(1),clf
for k = 1:2, subplot(2,2,k)
  surf(tss,xs(:),uss',  'EdgeColor','none')
  ylabel('x'), xlabel('t'), zlabel('u(x,t)')
  colormap(0.8*hsv), axis tight, view(126-4*k,45)
end
%ifOurCf2eps([mfilename 'Micro'])
%xs = squeeze(patches.x);  
%us = patchEdgeInt1( permute( reshape(us ...
%    ,length(ts),nSubP,1,nPatch) ,[2 1 3 4]) );
%us = squeeze(us);
%xs(end+1,:) = nan;  us(end+1,:,:) = nan;
%uss=reshape(permute(us,[1 3 2]),[],length(ts));
%{
\end{matlab}
Plot the macroscale predictions. 
\begin{matlab}
%}
figure(2),clf
plot(xs(:),us','.')
ylabel('u(x,t)'), xlabel('space x')
legend(num2str(ts',3))
%ifOurCf2eps([mfilename 'U'])
%{
\end{matlab}

%Test the error in BC is negligible, for both when micro-grid
%point on boundary and when micro-grid points straddle
%boundary.
%\begin{matlab}
%%}
%i=[ max(find(xs<+tol)) min(find(xs>1-tol)) ];
%j=[ min(find(xs>-tol)) max(find(xs<1+tol)) ];
%maxBCerror=max(max( abs(uss(i,:)+uss(j,:))/2 ));
%assert(maxBCerror<tol,'BC failure')
%%{
%\end{matlab}

%Plot a space-time surface of field values over the
%macroscale duration of the simulation.
%\begin{matlab}
%%}
%if iPP<=4 % only draw four subplots
%  i=j(1):j(2);
%  figure(1), if iPP==1, clf(), end
%  subplot(2,2,iPP)
%  mesh(ts,xs(i),uss(i,:)) 
%  view(60,40), colormap(0.8*hsv)
%  xlabel('time t'), ylabel('space x'), zlabel('u(x,t)') 
%  title(['patch ratio r = ' num2str(ratio)])
%  drawnow
%end%if 
%%{
%\end{matlab}

%At the end of the \verb|iPP|-loop, store field from centre
%region of each patch for comparison.
\begin{matlab}
%}
%i=nPeriodsPatch/2*mPeriod+1+(-mPeriod/2+1:mPeriod/2);
%Us(:,:,iPP)=squeeze(us(i,end,:));
%Xs=squeeze(patches.x(i,1,1,:));
%if iPP>1
%   assert(norm(Xs-Xsp)<tol,'sampling error in space')
%   Uerr(iPP)=max(max(abs(squeeze(Us(:,:,iPP)-Us(:,:,1)))))
%   end
%Xsp=Xs; 
end%for iPP
%ifOurCf2eps(mfilename) %optionally save figure
%{
\end{matlab}


\input{heteroBurstF.m}
%}