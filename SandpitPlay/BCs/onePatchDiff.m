% Simulate heterogeneous diffusion in 1D on one patch to
% test the code for one patch.  Then
% explore the Jacobian and eigenvalues.  AJR, Sep 2023
%!TEX root = ../Doc/eqnFreeDevMan.tex
%{
\section{\texttt{onePatchDiff}: 1D heterogeneous diffusion by simulation
on one patch}
\label{sec:onePatchDiff}
%\localtableofcontents


An example simulation in
time generated by the patch scheme applied to macroscale
diffusion propagation through a medium with microscale
heterogeneity. The inter-patch coupling is realised by
quartic interpolation of the patch's next-to-edge values to
the patch opposite edges. Such coupling preserves symmetry
in many systems, and quartic appears to be the lowest order
that generally gives good accuracy.


Suppose the spatial microscale lattice is at points~\(x_i\),
with constant spacing~\(dx\). With dependent
variables~\(u_i(t)\), simulate the microscale lattice
diffusion system
\begin{equation}
\D t{u_{i}}= \frac1{dx^2}\delta[c_{i-1/2}\delta u_{i}] ,
\label{eq:hetroDiff}
\end{equation}
in terms of the centred difference operator~\(\delta\). The
system has a microscale heterogeneity via the
coefficients~\(c_{i+1/2}\) which we assume to have some
given known periodicity. \cref{fig:homoDiffEdgyU2} shows one
patch simulation of this system: observe the effects of the
heterogeneity within each patch.








\subsection{Script code to simulate heterogeneous diffusion systems}
\label{sec:sc2heterodiff}


First establish the microscale heterogeneity has
micro-period~\verb|mPeriod| on the lattice, and random
log-normal values, albeit normalised to have harmonic mean
one.  This normalisation then means that macroscale
diffusion on a domain of length~\(2\pi\) should have near
integer decay rates, the squares of \(0,1,2,\ldots\). Then
the heterogeneity is repeated to fill each patch, and
phase-shifted for an ensemble.
\begin{matlab}
%}
clear all
mPeriod = 10
cHetr=exp(1*randn(mPeriod,1));% set random diffusion coefficients
cHetr = cHetr*mean(1./cHetr)  % normalise
%{
\end{matlab}

Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice diffusion
system~\cref{eq:hetroDiff} solved on one patch, with 
microscale spacing~\(0.2\), and quartic interpolation~(\(4\)) 
not used. 
\begin{matlab}
%}
global patches
nPatch = 1
nSubP = mPeriod+1 
if 0, Dom='equispace', else Dom='chebyshev', end
configPatches1(@heteroDiff0,[-pi pi],Dom,nPatch ...
    ,4,2/(nSubP-1),nSubP,'EdgyInt',true,'hetCoeffs',cHetr);
%{
\end{matlab}


\paragraph{Simulate}
Set the initial conditions of a simulation to be that of a
lump perturbed by significant random microscale noise,
via~\verb|randn|.
\begin{matlab}
%}
u0 = 0.8*exp(-patches.x.^2)+0.2*rand(nSubP,1,1,nPatch);
%u0int = patchEdgeInt1(u0,patches);
%du0dt = patchSys1(0,u0(:));
%{
\end{matlab}
Integrate using standard integrators.
\begin{matlab}
%}
if ~exist('OCTAVE_VERSION','builtin')
    [ts,us] = ode23(@patchSys1, [0 0.5], u0(:));
else % octave version
    [ts,us] = odeOcts(@patchSys1, 0.5*linspace(0,1).^2, u0(:));
end
%{
\end{matlab}

\paragraph{Plot space-time surface of the simulation}
Set boundary values of the results.
\begin{matlab}
%}
xs = squeeze(patches.x);  
us(:,[1 end]) = 0; 
%{
\end{matlab}
Now plot two space-time graphs of subsampled surface
over the macroscale duration of the simulation.
\begin{matlab}
%}
  figure(1),clf
  j=1:ceil(length(ts)/50):length(ts);
  mesh(ts(j),xs(:),us(j,:)') 
  view(60,40), colormap(0.8*hsv)
  xlabel('time $t$'), ylabel('space $x$'), zlabel('$u(x,t)$') 
  drawnow
%{
\end{matlab}



\paragraph{Compute Jacobian and its spectrum}
Let's explore the Jacobian dynamics, all for the same patch design and
heterogeneity.  
Form the Jacobian matrix, linear operator, by numerical
construction about a zero field.  Use~\verb|i| to store the
indices of the micro-grid points that are interior to the
patches and hence are the system variables.
\begin{matlab}
%}
  u0 = zeros(nSubP,1,1,nPatch);
  u0([1 end],:,:,:)=nan; u0=u0(:);
  i=find(~isnan(u0));
  nJac=length(i)
  Jac=nan(nJac);
  for j=1:nJac
    u0(i)=((1:nJac)==j);
    dudt=patchSys1(0,u0);
    Jac(:,j)=dudt(i);
  end
  nonSymmetric=norm(Jac-Jac')
  assert(nonSymmetric<5e-9,'failed symmetry')
  Jac(abs(Jac)<1e-12)=0;
%{
\end{matlab}

The number of zero eigenvalues, \verb|nZeroEv|, indicates
the number of decoupled systems in this patch configuration.
\begin{matlab}
%}
  [evecs,evals]=eig(Jac,'vector');
  nZeroEv=sum(abs(evals)<1e-5) 
  evals=evals
%{
\end{matlab}
End of the main script.



\input{../Patch/heteroDiff0.m}
%}