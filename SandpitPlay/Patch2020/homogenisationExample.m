% Simulate heterogeneous diffusion in 1D on patches as an
% example application of patches in space. Here the
% microscale is of known period which makes accurate
% simulation easier. AJR, Nov 2017 -- Jul 2020
%!TEX root = ../Doc/eqnFreeDevMan.tex
%{
\section[\texttt{homogenisationExample}: simulate heterogeneous diffusion in 1D \ldots]
{\texttt{homogenisationExample}: simulate heterogeneous diffusion in 1D on patches}
\label{sec:HomogenisationExample}
\localtableofcontents

\cref{fig:HomogenisationCtsU} shows an example simulation in
time generated by the patch scheme applied to heterogeneous
diffusion. That such simulations of heterogeneous diffusion
makes valid predictions was established by
\cite{Bunder2013b} who proved that the scheme is accurate
when the number of points in a patch is one more than a
multiple of the periodic of the microscale heterogeneity. 

The first part of the script implements the following
gap-tooth scheme (left-right arrows denote function
recursion).
\begin{enumerate}\def\itemsep{-1.5ex}
\item configPatches1 
\item ode15s \into patchSmooth1 \into heteroDiff
\item process results
\end{enumerate}
\begin{figure}
\centering \caption{\label{fig:HomogenisationCtsU}the
diffusing field~\(u(x,t)\) in the patch (gap-tooth) scheme
applied to microscale heterogeneous diffusion (\cref{sec:HomogenisationExample}). }
\includegraphics[scale=0.9]{homogenisationExampleCtsU}
\end{figure}%

Consider a lattice of values~\(u_i(t)\), with lattice
spacing~\(dx\), and governed by the heterogeneous diffusion 
\begin{equation}
\dot u_i=[c_{i-1/2}(u_{i-1}-u_i)+c_{i+1/2}(u_{i+1}-u_i)]/dx^2.
\label{eq:HomogenisationExample}
\end{equation}
In this 1D space, the macroscale, homogenised, effective
diffusion should be the harmonic mean of these coefficients.


\subsection{Script to simulate via stiff or projective integration}
Set the desired microscale periodicity, and correspondingly
choose random microscale diffusion coefficients (with
subscripts shifted by a half).
\begin{matlab}
%}
clear all
mPeriod = 3
cDiff = exp(randn(mPeriod,1))
cHomo = 1/mean(1./cDiff)
%{
\end{matlab}

Establish global data struct~\verb|patches| for
heterogeneous diffusion on \(2\pi\)-periodic domain. Use
nine patches, each patch of half-size ratio~\(0.2\). Quartic
(fourth-order) interpolation  \(\verb|ordCC|=4\) provides
values for the inter-patch coupling conditions. 
\begin{matlab}
%}
global patches
nPatch = 9
ratio = 0.2
nSubP = 2*mPeriod+1
Len = 2*pi;
ordCC = 4;
configPatches1(@heteroDiff,[0 Len],nan,nPatch ...
    ,ordCC,ratio,nSubP);
%{
\end{matlab}

A user may add information to~\verb|patches| in order to
communicate to the time derivative function: here include
the diffusivity coefficients, repeated to fill up a patch
\begin{matlab}
%}
patches.c=repmat(cDiff,(nSubP-1)/mPeriod,1);
%{
\end{matlab}

\paragraph{For comparison: conventional integration in time}
Set an initial condition, and here integrate forward in time
using a standard method for stiff systems---because of the
simplicity of linear problems this method works quite
efficiently here.  Integrate the interface
\verb|patchSmooth1| (\cref{sec:patchSmooth1}) to the
microscale differential equations.
\begin{matlab}
%}
u0 = sin(patches.x)+0.3*randn(nSubP,1,1,nPatch);
if ~exist('OCTAVE_VERSION','builtin')
[ts,ucts] = ode15s(@patchSmooth1, [0 2/cHomo], u0(:));
else % octave version
[ts,ucts] = odeOcts(@patchSmooth1, [0 2/cHomo], u0(:));
end
ucts = reshape(ucts,length(ts),length(patches.x(:)),[]);
%{
\end{matlab}

Plot the simulation in \cref{fig:HomogenisationCtsU}. 
\begin{matlab}
%}
figure(1),clf
xs = patches.x;  xs([1 end],:) = nan;
mesh(ts,xs(:),ucts'),  view(60,40)
xlabel('time t'), ylabel('space x'), zlabel('u(x,t)')
ourcf2eps([mfilename 'CtsU'])
%{
\end{matlab}

The code may invoke this integration interface.
\input{../Patch/odeOcts.m}


\paragraph{Use projective integration in time}
\begin{figure}
\centering \caption{\label{fig:HomogenisationU}field
\(u(x,t)\) shows basic projective integration of patches of
heterogeneous diffusion: different colours correspond to the
times in the legend. This field solution displays some fine
scale heterogeneity due to the heterogeneous diffusion.}
\includegraphics[scale=0.9]{homogenisationExampleU}
\end{figure}%
Now take \verb|patchSmooth1|, the interface to the time
derivatives, and wrap around it the projective integration
\verb|PIRK2| (\cref{sec:PIRK2}), of bursts of simulation
from \verb|heteroBurst| (\cref{sec:heteroBurst}), as
illustrated by \cref{fig:HomogenisationU}.

This second part of the script implements the following
design, where the micro-integrator could be, for example,
\verb|ode45| or \verb|rk2int|.
\begin{enumerate} \def\itemsep{-1.5ex}
\item configPatches1 (done in first part)
\item PIRK2 \into heteroBurst \into micro-integrator \into
patchSmooth1 \into heteroDiff
\item process results
\end{enumerate}
Mark that edge of patches are not to be used in the
projective extrapolation by setting initial values to \nan.
\begin{matlab}
%}
u0([1 end],:) = nan;
%{
\end{matlab}
Set the desired macro- and microscale time-steps over the
time domain: the macroscale step is in proportion to the
effective mean diffusion time on the macroscale; the burst
time is proportional to the intra-patch effective diffusion
time; and lastly, the microscale time-step is proportional
to the diffusion time between adjacent points in the
microscale lattice.
\begin{matlab}
%}
ts = linspace(0,2/cHomo,7)
bT = 3*( ratio*Len/nPatch )^2/cHomo
addpath('../ProjInt')
[us,tss,uss] = PIRK2(@heteroBurst, ts, u0(:), bT);
%{
\end{matlab}
Plot the macroscale predictions to draw
\cref{fig:HomogenisationU}. 
\begin{matlab}
%}
figure(2),clf
plot(xs(:),us','.')
ylabel('u(x,t)'), xlabel('space x')
legend(num2str(ts',3))
ourcf2eps([mfilename 'U'])
%{
\end{matlab}
Also plot a surface detailing the microscale bursts as shown
in the stereo \cref{fig:HomogenisationMicro}.
\begin{figure}
\centering
\caption{\label{fig:HomogenisationMicro}cross-eyed stereo
pair of the field~\(u(x,t)\) during each of the microscale
bursts used in the projective integration of heterogeneous
diffusion.}
\includegraphics[scale=0.9]{homogenisationExampleMicro}
\end{figure}
\begin{matlab}
%}
figure(3),clf
for k = 1:2, subplot(2,2,k)
  surf(tss,xs(:),uss',  'EdgeColor','none')
  ylabel('x'), xlabel('t'), zlabel('u(x,t)')
  axis tight, view(126-4*k,45)
end
ourcf2eps([mfilename 'Micro'])
%{
\end{matlab}
End of this example script.


\input{../Patch/heteroDiff.m}

\input{../Patch/heteroBurst.m}

Fin.
%}
