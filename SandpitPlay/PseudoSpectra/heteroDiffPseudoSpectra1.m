% find pseudospectra of heterogeneous diffusion in 1D on
% patches for curiosity. Here we interpolate next-to-edge
% values to get opposite edge values.  AJR, May 2023
%!TEX root = ../Doc/eqnFreeDevMan.tex
%{
\section{\texttt{heteroDiffPseudoSpectra1}: computational
homogenisation of a 1D heterogeneous diffusion by simulation
on small patches}
\label{sec:heteroDiffPseudoSpectra1}
%\localtableofcontents


\cref{fig:homoDiffEdgyU2} shows an example simulation in
time generated by the patch scheme applied to macroscale
diffusion propagation through a medium with microscale
heterogeneity. The inter-patch coupling is realised by
quartic interpolation of the patch's next-to-edge values to
the patch opposite edges. Such coupling preserves symmetry
in many systems, and quartic appears to be the lowest order
that generally gives good accuracy.


Suppose the spatial microscale lattice is at points~\(x_i\),
with constant spacing~\(dx\). With dependent
variables~\(u_i(t)\), simulate the microscale lattice
diffusion system
\begin{equation}
\D t{u_{i}}= \frac1{dx^2}\delta[c_{i-1/2}\delta u_{i}] ,
\label{eq:hetroDiff}
\end{equation}
in terms of the centred difference operator~\(\delta\). The
system has a microscale heterogeneity via the
coefficients~\(c_{i+1/2}\) which we assume to have some
given known periodicity. \cref{fig:homoDiffEdgyU2} shows one
patch simulation of this system: observe the effects of the
heterogeneity within each patch.

First establish the microscale heterogeneity has
micro-period~\verb|mPeriod| on the lattice, and random
log-normal values, albeit normalised to have harmonic mean
one.  This normalisation then means that macroscale
diffusion on a domain of length~\(2\pi\) should have near
integer decay rates, the squares of \(0,1,2,\ldots\). Then
the heterogeneity is repeated to fill each patch, and
phase-shifted for an ensemble.
\begin{matlab}
%}
mPeriod = 3%randi([2 5])
% set random diffusion coefficients
cHetr=exp(0.9*randn(mPeriod,1));
%cHetr = [3.966;2.531;0.838;0.331;7.276];
cHetr = cHetr*mean(1./cHetr) % normalise
%{
\end{matlab}

Establish the global data struct~\verb|patches| for the
microscale heterogeneous lattice diffusion
system~\cref{eq:hetroDiff} solved on \(2\pi\)-periodic
domain. When
simulating an ensemble of configurations, \verb|nSubP| (the
number of points in a patch) need not be dependent on the
period of the heterogeneous diffusion.
\begin{matlab}
%}
edgyInt = true
nSubP = (2-edgyInt)*mPeriod+1+edgyInt 
%{
\end{matlab}



\paragraph{Compute Jacobian and its spectrum}
Let's explore the Jacobian dynamics for a range of orders of
interpolation, all for the same patch design and
heterogeneity.  Here use a smaller ratio, and more patches,
as we do not plot.
\begin{matlab}
%}
nPatch = 5
ratio = 0.2;

leadingEvals=[];
for ord=0:2:0
  ordInterp=ord
  configPatches1(@heteroDiff,[-pi pi],nan,nPatch ...
      ,ord,ratio,nSubP,'EdgyInt',edgyInt ,'hetCoeffs',cHetr);
%{
\end{matlab}

Form the Jacobian matrix, linear operator, by numerical
construction about a zero field.  Use~\verb|i| to store the
indices of the micro-grid points that are interior to the
patches and hence are the system variables.
\begin{matlab}
%}
  u0 = zeros(nSubP,1,1,nPatch);
  u0([1 end],:,:,:)=nan; u0=u0(:);
  i=find(~isnan(u0));
  nJ=length(i)
  Jac=nan(nJ);
  for j=1:nJ
    u0(i)=((1:nJ)==j);
    dudt=patchSys1(0,u0);
    Jac(:,j)=dudt(i);
  end
  nonSymmetric=norm(Jac-Jac')
%  assert(nonSymmetric<5e-9,'failed symmetry')
  Jac(abs(Jac)<1e-12)=0;
%{
\end{matlab}
Find the eigenvalues of the Jacobian, and list for
inspection in \cref{tbl:homoDiffEdgy1}: the spectral
interpolation is effectively exact for the macroscale;
quadratic interpolation is usually quantitatively in error;
quartic interpolation appears to be the lowest order for
reliable quantitative accuracy.

The number of zero eigenvalues, \verb|nZeroEv|, indicates
the number of decoupled systems in this patch configuration.
\begin{matlab}
%}
  [evecs,evals]=eig(Jac,'vector');
  eval=-sort(-real(evals));
  nZeroEv=sum(eval(:)>-1e-5) 
  leadingEvals=[leadingEvals eval(1:2*nPatch)]
%{
\end{matlab}

\paragraph{Pseuso-spectrum of the Jacobian}
\begin{matlab}
%}
figure(1),clf()
psa(Jac)
xlabel('$\Re\lambda$'), ylabel('$\Im\lambda$')
quasiLogAxes(0.3,0.3);
%{
\end{matlab}

End of the for-loop over orders of interpolation.
\begin{matlab}
%}
end
%{
\end{matlab}

End of the main script.



\input{../Patch/heteroDiff.m}


Fin.
%}