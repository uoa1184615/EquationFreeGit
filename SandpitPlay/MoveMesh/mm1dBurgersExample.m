% mm1dBurgersExample: moving patches of Burgers PDE
%!TEX root = doc.tex
%{
\section{\texttt{mm1dBurgersExample}: example of moving
patches for Burgers' PDE}
\label{sec:mm1dBurgersExample}



The code here shows one way to get started: a user's script
may have the following three steps (left-right arrows denote
function recursion).
\begin{enumerate}\def\itemsep{-1ex}
\item configPatches1 
\item ode15s integrator \into\ mmPatchSys1 \into\ user's PDE
\item process results
\end{enumerate}
The simulation seems perfectly happy for the patches to move
so that they overlap in the shock! and then separate again
as the shock decays.

Establish global patch data struct to point to and interface
with a function coding Burgers' \pde: to be solved on
$1$-periodic domain, with fifteen patches, spectral
interpolation couples the patches, each patch of half-size
ratio~$0.2$, and with five microscale points forming each
patch.  Prefer EdgyInt as we suspect it performs better
for moving meshes.
\begin{matlab}
%}
clear all
global patches
patches = configPatches1(@mmBurgersPDE,[0 1], nan, 15, 0, 0.2, 5 ...
    ,'EdgyInt',true);
patches.mmTime=0.8;
patches.Xlim=[0 1];
%{
\end{matlab}
The above two amendments to \verb|patches| should eventually be
part of the configuration function.

\paragraph{Decide the moving mesh time parameter}
Here for \(\epsilon=0.02\).
\begin{itemize}
\item Would be best if the moving mesh was no stiffer than
the stiffest microscale sub-patch mode.  These would both be
the zig-zag modes.
\begin{itemize}
\item Here the mesh \pde\ is \(X_t=(N^2/\tau)X_{jj}\) so its
zig-zag mode decays with rate~\(4N^2/\tau\)\,.
\item Here the patch width is~\(h=0.2/15=1/75\), and so the
microscale step is \(\delta=h/4=1/300\).  Hence the
diffusion \(u_t=\epsilon u_{xx}\) has zig-zag mode decaying
at rate~\(4\epsilon/\delta^2\).
\end{itemize}
So, surely best to have \(4N^2/\tau \lesssim 4\epsilon
/\delta^2\), that is, \(\tau \gtrsim N^2\delta^2 /\epsilon
\approx 0.1\).

\item But also we do not want the slowest modes of the
moving mesh to obfuscate the system's macroscale modes---the
macroscale zig-zag.
\begin{itemize}
\item The slowest moving mesh mode has wavenumber in~\(j\)
of~\(2\pi/N\), and hence rate of decay \((N^2/\tau)
(2\pi/N)^2 =4\pi^2/\tau\).
\item The fastest zig-zag mode of the system \(U_t=\epsilon
U_{xx}\) on step~\(H\) has decay rate \(4\epsilon/H^2\).
\end{itemize}
So best if \(4\pi^2/\tau \gtrsim 4\epsilon/H^2\), that is,
\(\tau \lesssim \pi^2H^2 /\epsilon \approx 2\)\,.   

(Computations indicate need \(\tau<0.8\)??)
\end{itemize}


\paragraph{Simulate in time}
Set usual sinusoidal initial condition.  Add some microscale
randomness that decays within time of~\(0.01\), but also
seeds slight macroscale variations.
\begin{matlab}
%}
u0 = 0.3+sin(2*pi*patches.x)+0.0*randn(size(patches.x));
N = size(patches.x,4)
D0 = zeros(N,1);
%ud=mmPatchSys1(0,[D0;u0(:)],patches); 
%return
%{
\end{matlab}
Simulate in time using a standard stiff integrator and the
interface function \verb|mmPatchSys1()|
(\cref{sec:mmPatchSys1}).
\begin{matlab}
%}
tic
[ts,us] = ode15s(@mmPatchSys1,linspace(0,0.8),[D0;u0(:)]);
cpuTime = toc
%{
\end{matlab}


\paragraph{Plots}
Choose whether to save some plots, or not.
\begin{matlab}
%}
global OurCf2eps
OurCf2eps = false;
%{
\end{matlab}

Plot the movement of the mesh, the centre of each patch, as
a function of time: spatial domain horizontal, and time
vertical.
\begin{matlab}
%}
figure(1),clf
Ds=us(:,1:N);
Xs=shiftdim(mean(patches.x),2);
plot(Xs+Ds,ts), ylabel('time t'),xlabel('space x')
title('Burgers PDE: patch locations over time')
ifOurCf2eps([mfilename 'Mesh'])
%{
\end{matlab}

Animate the simulation using only the microscale values
interior to the patches: set $x$-edges to \verb|nan| to
leave the gaps.  \cref{fig:mmBurgersExample} illustrates an
example simulation in time generated by the patch scheme
applied to Burgers'~\pde.
\begin{matlab}
%}
uLim=[min(u0(:)) max(u0(:))]
us=us(:,N+1:end).';
us(abs(us)>2)=nan;
x0s=squeeze(patches.x); x0s([1 end],:)=nan;  
%% section break to ease rerun of animation 
figure(2),clf
for i=1:length(ts)
  xs=x0s+Ds(i,:);
  if i==1,  hpts=plot(xs(:),us(:,i),'.');
       ylabel('field u'), xlabel('space x')
       axis([0 1 uLim])
  else set(hpts,'XData',xs(:),'YData',us(:,i));
  end
  legend(['time = ' num2str(ts(i),2)],'Location','north')
  if rem(i,31)==1, ifOurCf2eps([mfilename num2str(i)]), end
  pause(0.09)
end
%%
%{
\end{matlab}
\begin{figure}
\centering \caption{\label{fig:mmBurgersExample}field
$u(x,t)$ of the moving patch scheme applied to Burgers'~\pde.}
\begin{tabular}{@{}cc@{}}
\includegraphics[width=0.47\linewidth]{Figs/mmBurgersExample1}
&
\includegraphics[width=0.47\linewidth]{Figs/mmBurgersExample32}
\\
\includegraphics[width=0.47\linewidth]{Figs/mmBurgersExample63}
&
\includegraphics[width=0.47\linewidth]{Figs/mmBurgersExample94}
\end{tabular}
\end{figure}

\paragraph{Spectrum of the moving patch system}
Compute the spectrum based upon the linearisation about some
state: \(u={}\)constant with \(D=0\) are equilibria;
otherwise the computation is about a 'quasi-equilibrium' on
the `fast-time'.
\begin{matlab}
%}
u0 = 0.1+0*sin(2*pi*patches.x);
u0 = [zeros(N,1); u0(:)];
f0 = mmPatchSys1(0,u0);
normf0=norm(f0)
%{
\end{matlab}
But we must only use the dynamic variables, so let's find
where they are. 
\begin{matlab}
%}
xs=patches.x; xs([1 end],:,:,:)=nan;
i=find(~isnan( [zeros(N,1);xs(:)] )); 
nJac=length(i)
%{
\end{matlab}
Construct Jacobian with numerical differentiation.
\begin{matlab}
%}
deltau=1e-7;
Jac=nan(nJac);
for j=1:nJac
    uj=u0; uj(i(j))=uj(i(j))+deltau;
    fj = mmPatchSys1(0,uj);
    Jac(:,j)=(fj(i)-f0(i))/deltau;
end
%{
\end{matlab}
Compute and plot the spectrum with non-linear axis scaling
(\cref{fig:mm1dBurgersExampleSpec}).
\begin{matlab}
%}
eval=-sort(-eig(Jac))
figure(3),clf
hp=plot(real(eval),imag(eval),'.');
xlabel('Re\lambda'), ylabel('Im\lambda')
quasiLogAxes(hp,10,1)
ifOurCf2eps([mfilename 'Spec'])
%{
\end{matlab}
\begin{figure}
\centering \caption{\label{fig:mm1dBurgersExampleSpec}spectrum
of the moving mesh Burgers' system (about \(u=0.1\)).  The
four clusters are: right, macroscale Burgers' \pde\ (complex
conjugate pairs); left complex pairs, sub-patch \pde\ modes;
left real, moving mesh modes.}
\includegraphics[scale=0.85]{Figs/mm1dBurgersExampleSpec}
\end{figure}

Fin.
%}